From 20d5fe930f25ed270aadf180d37379b1d3ce56a0 Mon Sep 17 00:00:00 2001
From: siisgoo <siisgoo@mail.ru>
Date: Wed, 25 Nov 2020 00:17:30 +0300
Subject: [PATCH] 	modified:   Makefile 	modified:   config.mk 
 modified:   dwm.c 	new file:   mpdcontrol.c

---
 Makefile     |   2 +-
 config.mk    |   2 +-
 dwm.c        |   1 +
 mpdcontrol.c | 181 +++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 184 insertions(+), 2 deletions(-)
 create mode 100644 mpdcontrol.c

diff --git a/Makefile b/Makefile
index 77bcbc0..28ee979 100644
--- a/Makefile
+++ b/Makefile
@@ -17,7 +17,7 @@ options:
 .c.o:
 	${CC} -c ${CFLAGS} $<
 
-${OBJ}: config.h config.mk
+${OBJ}: config.h config.mk mpdcontrol.c
 
 config.h:
 	cp config.def.h $@
diff --git a/config.mk b/config.mk
index 7084c33..e65ed93 100644
--- a/config.mk
+++ b/config.mk
@@ -22,7 +22,7 @@ FREETYPEINC = /usr/include/freetype2
 
 # includes and libs
 INCS = -I${X11INC} -I${FREETYPEINC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}
+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lmpdclient
 
 # flags
 CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
diff --git a/dwm.c b/dwm.c
index 664c527..da0fefc 100644
--- a/dwm.c
+++ b/dwm.c
@@ -36,6 +36,7 @@
 #include <X11/Xlib.h>
 #include <X11/Xproto.h>
 #include <X11/Xutil.h>
+#include <X11/XF86keysym.h>
 #ifdef XINERAMA
 #include <X11/extensions/Xinerama.h>
 #endif /* XINERAMA */
diff --git a/mpdcontrol.c b/mpdcontrol.c
new file mode 100644
index 0000000..01642df
--- /dev/null
+++ b/mpdcontrol.c
@@ -0,0 +1,181 @@
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <regex.h>
+
+#include <mpd/client.h>
+
+#define MPDHOST "localhost"
+#define MPDPORT 6600
+
+struct mpd_connection *get_conn(){
+    struct mpd_connection *conn;
+
+    conn = mpd_connection_new(MPDHOST, MPDPORT, 1000);
+
+    if(mpd_connection_get_error(conn) != MPD_ERROR_SUCCESS){
+        fprintf(stderr, "Could not connect to mpd: %s\n", mpd_connection_get_error_message(conn));
+
+        mpd_connection_free(conn);
+        return NULL;
+    }
+
+    return conn;
+}
+
+void
+mpd_switch_track(const Arg *direction)
+{
+	struct mpd_connection *conn;
+
+	conn = get_conn();
+
+	if(conn == NULL) {
+		return;
+	}
+
+	if (direction->i > 0) {
+		mpd_run_next(conn);
+	}
+	else if (direction->i < 0) {
+		mpd_run_previous(conn);
+	}
+	else if (direction->i == 0) {
+		printf("0");
+	}
+
+	mpd_connection_free(conn);
+}
+
+char *get_regerror(int errcode, regex_t *compiled){
+    size_t length = regerror(errcode, compiled, NULL, 0);
+    char *buffer = malloc(length);
+    (void) regerror(errcode, compiled, buffer, length);
+
+    return buffer;
+}
+
+void
+mpd_switch_playback(){
+	struct mpd_connection *conn;
+	struct mpd_status *status;
+	struct mpd_song *song;
+	enum mpd_state state;
+
+	const char *filename;
+
+	regex_t expr;
+
+	if((conn=get_conn()) == NULL){
+		return;
+	}
+
+	status = mpd_run_status(conn);
+
+	if(status == NULL){
+		fprintf(stderr, "Could not get mpd status: %s\n", mpd_status_get_error(status));
+
+		mpd_status_free(status);
+		mpd_connection_free(conn);
+		return;
+	}
+
+	state = mpd_status_get_state(status);
+
+	if(state == MPD_STATE_STOP || state == MPD_STATE_PAUSE)
+	{
+		mpd_run_play(conn);
+		mpd_status_free(status);
+		mpd_connection_free(conn);
+	}
+	else if(state != MPD_STATE_UNKNOWN) //playing some music
+	{
+		song = mpd_run_current_song(conn);
+
+		if(song == NULL){
+			fprintf(stderr, "Error fetching current song!\n");
+
+			mpd_song_free(song);
+			mpd_status_free(status);
+			mpd_connection_free(conn);
+			return;
+		}
+
+		filename = mpd_song_get_uri(song);
+
+		int errcode = regcomp(&expr, "^[[:alnum:]]+://", REG_EXTENDED|REG_NOSUB);
+		if(errcode != 0){
+			char *err = get_regerror(errcode, &expr);
+			fprintf(stderr, "Could not compile regexp: %s\n", err);
+
+			mpd_song_free(song);
+			mpd_status_free(status);
+			mpd_connection_free(conn);
+			free(err);
+			regfree(&expr);
+			return;
+		}
+
+		int matchcode = regexec(&expr, filename, 0, NULL, 0);
+
+		if(matchcode == 0){
+			if(strstr(filename, "file://") == filename)
+			{
+			/* match just at the start of the filename */
+			/* this means that mpd is playing a file outside */
+			/* the music_dir, */
+			/* but on disk, so we can safely pause */
+				mpd_run_toggle_pause(conn);
+			}
+			else {
+			mpd_run_stop(conn);
+			}
+		}
+		else if(matchcode == REG_NOMATCH){
+			mpd_run_toggle_pause(conn);
+		}
+		else{
+			char *err = get_regerror(matchcode, &expr);
+			fprintf(stderr, "Error while matching regexp: %s\n", err);
+
+			free(err);
+		}
+
+		regfree(&expr);
+		mpd_song_free(song);
+		mpd_status_free(status);
+		mpd_connection_free(conn);
+	}
+}
+
+void
+mpd_volume_ctl(const Arg *direction){
+	int volume;
+	struct mpd_connection *conn;
+	struct mpd_status *status;
+
+	conn = get_conn();
+
+	if (conn == NULL)
+		return;
+
+	status = mpd_run_status(conn);
+
+	if (status == NULL){
+		mpd_status_free(status);
+		mpd_connection_free(conn);
+		return;
+	}
+
+	volume = mpd_status_get_volume(status);
+	mpd_status_free(status);
+
+	volume += (direction->i > 0) ? 5 : -5;
+	if (volume < 0)
+		volume = 0;
+	else if (volume > 100)
+		volume = 100;
+
+	mpd_run_set_volume(conn, volume);
+	mpd_connection_free(conn);
+}
-- 
2.29.2

