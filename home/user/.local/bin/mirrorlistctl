#!/bin/bash

trap die SIGINT SIGTERM

BEST_COUNT=6

ML="/etc/pacman.d/mirrorlist"
MML="${ML}.my"
AML="${ML}.all"
FML="${ML}.fresh"
RML="${ML}.ranked"
BUML="${ML}.backup"

FML_A=1

buff=$(mktemp)

command=$1
arg=$2

#UTILS
#COLORIZING
_NORMAL=$(tput setaf 7)
red() { printf "$(tput setaf 1)${*}${_NORMAL}"; }
green() { printf "$(tput setaf 2)${*}${_NORMAL}"; }
blue() { printf "$(tput setaf 4)${*}${_NORMAL}"; }
yellow() { printf "$(tput setaf 3)${*}${_NORMAL}"; }
cyan() { printf "$(tput setaf 6)${*}${_NORMAL}"; }

varn()
{
	for msg in "$@"; do
		printf "[$(red '!!')] $msg\n"
		shift
	done
}

cleanup()
{
	rm -f ${buff} ${buff}.?
}

die()
{
	if [[ -z $1 ]]; then
		varn "Terminating"
	else
		varn "$@" "Terminating"
	fi

	cleanup
	exit 1
}

success_msg() { printf "[$(green "SS")] $*\n"; }

if_success()
{
	#check for flag($1) value and print congrat of varn with $2 and $3.
	#if $2 specified as "die_if_not", then if value is'n satisfactory $flag var
	#the program will be terminated.
	#func takes $4 and $5 arguments which parce as an func or program that
	#will be run according to the value of $flag
	flag=$1

	if [[ $2 == "die_if_not" ]]; then
		diecmd="die"
		shift
	fi

	if (( ! $flag )); then
		[[ $2 == "skip" ]] || success_msg "$2"

		[[ -n $4 ]] && $4

		return 0
	else
		[[ $3 == "skip" ]] || varn "$3"

		[[ -n $5 ]] && $5
		[[ -n $diecmd ]] && $diecmd

		return 1
	fi
}

usage()
{
	if [[ -n $1 ]]; then
		printf "Unknown command: \"%s\"\n" "$1"
	fi

	printf "Usage: %s: set [my|all|fresh|ranked] rank [{current}|fresh]\n" $(basename "$0")
	printf " set  <ML>\tset default mirror list\n"
	printf " rank <ML>\trank mirror list and set as default\n"
}
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

getFreshML()
{
	ML_URL="https://www.archlinux.org/mirrorlist/all"

	printf "[$(cyan "@@")] Getting fresh mirror list\n"

	wget --quiet --output-document="${FML}" "${ML_URL}"
	if_success $? "Fresh mirror list successfully updated"\
		"Cant get fresh mirror list" || return 1

	cat "${FML}" | sed -e 's/^#Server/Server/' -e '/^#/d' > ${buff}
	mv ${buff} ${FML}
	chmod 644 ${FML}
				
	return 0
}

set_ml()
{
	case $1 in
	my)
		NML=${MML} ;;
	all)
		NML=${AML} ;;
	fresh)
		if (( ! ${FML_A} )); then
			NML=${FML}
		else
			varn "Error: Fresh mirror list unavailible"
			return 1
		fi
		;;
	ranked)
		NML=${RML} ;;
	*)
		varn "Error: Invalide argument for command \"$command: $1\""
		usage
		return 1
		;;
	esac

	[[ -f "${NML}" ]] && cp "${NML}" "${ML}"
	if_success $? "Now you use $(green ${NML/*.}) mirror list"\
		"Cant change mirror list" || return 1

	return 0
}

rank_ml()
{
	cp ${ML} ${BUML}

	case $1 in
	current)
		printf "[$(cyan "@@")] Ranking current mirros...\n"
		curml=$(show_ml) ; curml=${curml/You use } ; curml=${curml/ mirror list}
		printf "[$(cyan "II")] Current mirror list is \"$curml\" mirror list\n"

		rankmirrors -n ${BEST_COUNT} ${BUML} > ${RML}
		if_success $? "Current mirror list successfully ranked"\
			"Cant rank current mirror list"
		cp ${RML} ${ML}
		;;
	fresh)
		printf "[$(cyan "@@")] Getting fresh mirror list...\n"

		getFreshML
		if_success $? "skip"\
			"Cant get fresh mirror list" || return 1

		printf "[$(cyan "@@")] Ranking fresh mirror list...\n"

		rankmirrors -n ${BEST_COUNT} ${FML} > ${RML}

		if_success $? "Fresh mirror list successfully ranked"\
			"Cant rank fresh mirror list"

		;;
	*)
		varn "No such mirror list: \"$1\""
		usage
		;;
	esac

	set_ml ranked

	return 0
}

show_ml()
{
	if [[ ! ${ML}.* ]]; then
		success_msg "You use $(yellow default) mirror list"
		return 0
	fi

	for ml in ${ML}.* ; do
		[[ "$(diff ${ML} ${ml})" ]] && continue
		success_msg "You use $(green ${ml/${ML}.}) mirror list"
		return 0
	done
}

startup()
{
	[[ $UID != 0 ]] && printf "go root please\n" && die

	getFreshML
	if_success $? "skip" "skip"\
		"cp ${FML} ${AML}" || FML_A=0

	if [[ ! -s ${MML} ]]; then
		cp ${AML} ${MML}
		if_success $? "MY mirror list successfully created"\
			"Cant create MY mirror list" || return 1
	fi

	return 0
}

startup

case $command in
	s|set)
		set_ml $arg ;;
	r|rank)
		rank_ml $arg ;;
	show)
		show_ml ;;
	h|help)
		usage ;;
	*)
		usage $command;;
esac

cleanup
