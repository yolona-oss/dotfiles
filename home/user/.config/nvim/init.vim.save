set nocompatible
" filetype off

"###################"
"   PLUGGIN SETUP   "
"###################"
let g:plug_threads = 6
let g:plug_retries = 3

filetype plugin on
filetype plugin indent on

call plug#begin('~/.vim/plugged')
Plug 'https://github.com/xolox/vim-misc'                   " auto load
Plug 'https://github.com/xolox/vim-session'                " session manager
Plug 'wakatime/vim-wakatime'                               " wakatime.com
" Plug 'vim-scripts/vim-auto-save'                           " files autosave
Plug 'SirVer/ultisnips'                                    " snippets
Plug 'https://github.com/honza/vim-snippets'               " snippents files
Plug 'https://github.com/pangloss/vim-javascript.git'      " javascript extension
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'jparise/vim-graphql'
Plug 'vim-airline/vim-airline'                             " status line
Plug 'vim-airline/vim-airline-themes'                      " themes
Plug 'vim-scripts/AfterColors.vim'                         " themes
Plug 'rafi/awesome-vim-colorschemes'                       " themes
Plug 'sonph/onehalf', { 'rtp': 'vim' }                     " theme
Plug 'https://github.com/sjl/badwolf'                      " theme
Plug 'https://github.com/joshdick/onedark.vim'             " theme
" Plug 'https://github.com/plasticboy/vim-markdown'          " markdown format support
Plug 'ryanoasis/vim-devicons'                              " icons support
" Plug 'powerline/fonts'                                     " powerline fonts
Plug 'https://github.com/Yggdroot/indentLine'
Plug 'ycm-core/YouCompleteMe'                              " code completer
Plug 'https://github.com/fatih/vim-go'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'tpope/vim-commentary'                                " commentary shortcuts
" Plug 'm-pilia/vim-pkgbuild'                                " archlinux AUR PKGBUILD files support
Plug 'https://github.com/tpope/vim-surround'               " html-like tags handle utils
Plug 'https://github.com/octol/vim-cpp-enhanced-highlight' " cpp syntax hilightinght
Plug 'ctrlpvim/ctrlp.vim'                                  " file finder
Plug 'preservim/nerdtree'                                  " dir tree dock
" Plug 'https://github.com/vim-scripts/taglist.vim'
Plug 'https://github.com/preservim/tagbar'
Plug 'vim-scripts/bufkill.vim'                             " exit buffers without exiting vim
Plug 'jreybert/vimagit'                                    " git support
Plug 'https://github.com/ap/vim-css-color'                 " HEX-colors hilighting
Plug 'https://github.com/matze/vim-move'                   " code moving
" Plug 'https://github.com/sjl/gundo.vim'                    " undo tree
" Plug 'https://github.com/sheerun/vim-polyglot'             " colors
Plug 'https://github.com/junegunn/vim-easy-align'          " fast text aligning
Plug 'https://github.com/ervandew/supertab'
Plug 'https://github.com/jiangmiao/auto-pairs'             " completing pairs
Plug 'https://github.com/rhysd/vim-clang-format'           " auto formating
Plug 'honza/vim-snippets'                                  " set of snippets
" Plug 'https://github.com/ryanoasis/nerd-fonts'
Plug 'https://github.com/godlygeek/tabular'                " tab extender
Plug 'https://github.com/junegunn/vim-easy-align'
Plug 'https://github.com/fadein/vim-FIGlet'  " figlet
Plug 'https://github.com/scrooloose/syntastic'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
call plug#end()

"##########################
"        GENERAL
"##########################
set number
set relativenumber
set cursorline
syntax on
set encoding=UTF-8
set fileencoding=UTF-8
" set guifont=Anonymous\ Pro\ Nerd\ Font\ Complete\ Mono\ 12
set exrc    "use local ./vimrc for each dir
set secure  "disallow to run autocmd in local ./vimrc
set smartcase "smart search
set hlsearch
set ignorecase
set lazyredraw
set undofile

set autoindent
set tabstop=8
set shiftwidth=8
set smarttab
set expandtab
" set smartindent
" set updatetime=5000
set t_Co=256
set autoread
set noequalalways
set winheight=25
" set winwidth=25

set noswapfile
set nobackup
set undodir=~/data/.vim/undodir
set backupdir=~/data/.vimtmp//,.
" set undofile

" hightliting clear
if maparg('<C-L>', 'n') ==# ''
        nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

autocmd filetype c,cpp set cin
autocmd FileType typescript setlocal formatprg=prettier\ --parser\ typescript

augroup project
        autocmd!
        autocmd BufRead,BufNewFile *.hpp,*.cpp set filetype=cpp
augroup END

"######################
"      SHORTCUTS
"######################

" Leader Key "let mapleader = \ 

autocmd FileType javascript nmap <buffer> <C-]> :YcmCompleter GoTo<CR>

"##############################
"       WINDOW SHORTCUTS
"##############################
" Buffer switching left, down, up, right
map <c-h> <c-w>h
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l

"############################
"       TABS SHORTCUTS
"############################

" Mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext

"##############################
"       BUFFER SWITCHING
"##############################

map <c-i> :bn<cr>
map <c-o> :bp<cr>
map <c-c> :BD<cr>

" nnoremap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bnext<CR>
" nnoremap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bprevious<CR>

"######################
"       NERDTree
"######################

" NERDTree
map <c-n> :NERDTreeToggle<CR>

"###################
"      PLUGINS
"###################

"############################
"        YouCompleteMe
"############################

"""let &rtp .= ',' . expand( '<sfile>:p:h' )

let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_keep_logfiles = 0
" let g:ycm_log_level = 'debug'
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 1
let g:ycm_error_symbol = '\\'

"######################
"      NERDTree
"######################

" Autostart
autocmd StdinReadPre * let s:std_in=1
" Show NERDTree window if vim opened without arguments

if argc() == 0
        autocmd VimEnter * NERDTree projects " Startup default directory
        autocmd VimEnter * if argc() == 0 && !exists("s:std_in") && v:this_session == "" | NERDTree | endif " Autostart when use stored session
endif

" Closing NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" autocmd BufEnter * lcd %:p:h
let g:NERDTreeChDirMode = 2

let NERDTreeShowHidden=0
let NERDTreeShowBookmarks=1
let NERDTreeMinimalUI=1

" let g:NERDTreeFileExtensionHighlightFullName = 1
" let g:NERDTreeExactMatchHighlightFullName = 1
" let g:NERDTreePatternMatchHighlightFullName = 1
" let g:NERDTreeHighlightFolders = 1        " enables folder icon highlighting using exact match
" let g:NERDTreeHighlightFoldersFullName = 1    " highlights the folder name

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
        exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
        exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

" Dir arrows
let g:NERDTreeDirArrowExpandable = '‚û§ ' "‚ùê‚ñ∂
let g:NERDTreeDirArrowCollapsible = '‚û• ' "‚äø‚ñº
let NERDTreeNodeDelimiter="üòÄ"

let NERDTreeIgnore=[
                        \ 'node_modules$[[dir]]',
                        \ '.git$[[dir]]',
                        \ '.swp$[[file]]',
                        \ '.aux[[file]]'
                        \ ]


"#######################
"      AUTO-SAVE
"#######################

let g:auto_save = 360
let g:auto_save_no_updatetime = 1
let g:auto_save_in_insert_mode = 0
let g:auto_save_silent = 1
" let g:auto_save_postsave_hook = cmd "run cmd after save
"
"
"####################
"     supertab
"####################
let g:SuperTabDefaultCompletionType = '<C-n>'

"###################
"       CtrlP   
"###################

set wildignore+=*tmp*,*.so,*.swp,*.zip
let g:ctrlp_user_command = 'find %s -type f'

" Ignore files in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

let g:ctrlp_custom_ignore = {
                        \ 'dir':  '\v[\/](node_modules|target|dist)|(\.(git|hg|svn))$',
                        \ 'file': '\v\.(exe|so|dll|DS_Store)$',
                        \ 'link': 'some_bad_symbolic_links',
                        \ }

"########################
"      AfterColor
"########################

" if argc() == 0
colorscheme badwolf
" else
"       colorscheme happy_hacking
" endif

"##########################
"       VIM-AIRLINE
"##########################

autocmd VimEnter * AirlineTheme dark

let g:airline_highlighting_cache = 1

let g:airline_enable_fugitive=1
let g:airline_enable_syntastic=1
let g:airline_enable_bufferline=1

let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
        let g:airline_symbols = {}
endif

let g:airline_fugitive_prefix   = '‚éá '
let g:airline_paste_symbol      = 'œÅ'
let g:airline_branch_prefix     = '‚éá '

" " unicode symbols
" let g:airline_left_sep = '¬ª'
" let g:airline_left_sep = '‚ñ∂'
" let g:airline_right_sep = '¬´'
" let g:airline_right_sep = '‚óÄ'
" let g:airline_symbols.crypt = 'üîí'
" let g:airline_symbols.linenr = '‚ò∞'
" let g:airline_symbols.linenr = '‚êä'
" let g:airline_symbols.linenr = '‚ê§'
" let g:airline_symbols.linenr = '¬∂'
" let g:airline_symbols.maxlinenr = ''
" let g:airline_symbols.maxlinenr = '„èë'
" let g:airline_symbols.branch = '‚éá'
" let g:airline_symbols.paste = 'œÅ'
" let g:airline_symbols.paste = '√û'
" let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
" let g:airline_symbols.notexists = '…Ü'
" let g:airline_symbols.whitespace = 'Œû'

" powerline symbols
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = '‚ò∞ '
let g:airline_symbols.maxlinenr = 'ÓÇ°'
let g:airline_symbols.dirty='‚ö°'

" let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.paste  = 'œÅ'
let g:airline_symbols.whitespace = 'Œû'

let g:airline_stl_path_style = 'short'

let w:airline_disable_statusline    = 0
let w:airline_skip_empty_sections   = 0
let g:airline_statusline_ontop      = 0

let g:airline_detect_spell=1

" let g:airline_section_a      =
" let g:airline_section_b      =
" let g:airline_section_c      =
" let g:airline_section_gutter =
" let g:airline_section_x      =
" let g:airline_section_y      =
" let g:airline_section_z      =
" let g:airline_section_error  =

let g:airline_extensions = ['branch', 'tabline']

let g:airline#extensions#tabline#fnamemod = ':p:.'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved' "'jsformatter'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = 'ÓÇ∞'
let g:airline#extensions#tabline#left_alt_sep = ' '

let g:airline#extensions#ycm#enabled = 1

"#####################
"     UltiSnippets
" ####################
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"##########
"   CPP
"##########
" let g:cpp_class_scope_highlight = 1
" let g:cpp_member_variable_highlight = 1
" let g:cpp_class_decl_highlight = 1
" let g:cpp_posix_standard = 1
" let g:cpp_experimental_simple_template_highlight = 1
" let g:cpp_concepts_highlight = 1

let g:cpp_member_highlight = 1
let g:cpp_attributes_highlight = 1
let g:cpp_function_highlight = 1

"#########
"Syntastic
"#########
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

"###########################
" nerdtree-syntax-highlight
"###########################
" let g:WebDevIconsDisableDefaultFolderSymbolColorFromNERDTreeDir = 1
" let g:WebDevIconsDisableDefaultFileSymbolColorFromNERDTreeFile = 1
" let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
" let g:NERDTreeFileExtensionHighlightFullName = 1
" let g:NERDTreeExactMatchHighlightFullName = 1
" let g:NERDTreePatternMatchHighlightFullName = 1

"####################
"       CCLS
"####################

"####################
"   vim-javascript
"####################

" augroup javascript_folding
"   au!
"   au FileType javascript setlocal foldmethod=syntax
" augroup END

map <leader>l :exec &conceallevel ? "set conceallevel=0" : "set conceallevel=1"<CR>
set conceallevel=0
let g:javascript_plugin_jsdoc = 0
" let g:javascript_plugin_ngdoc = 1
" let g:javascript_plugin_flow = 1

let g:javascript_conceal_function             = "∆í"
let g:javascript_conceal_null                 = "√∏"
let g:javascript_conceal_this                 = "@"
let g:javascript_conceal_return               = "‚áö"
let g:javascript_conceal_undefined            = "¬ø"
let g:javascript_conceal_NaN                  = "‚Ñï"
let g:javascript_conceal_prototype            = "¬∂"
let g:javascript_conceal_static               = "‚Ä¢"
let g:javascript_conceal_super                = "Œ©"
let g:javascript_conceal_arrow_function       = "‚áí"

"###################
"    indentlie
"###################
" let g:indentLine_color_term = 239
" let g:indentLine_char = '|'
" let g:indentLine_char_list = ['|', '¬¶', '‚îÜ', '‚îä']
" let g:indentLine_enabled = 1

"#####################
"      taglist
"#####################
"F5 to togge
" :map <F5> :TlistToggle <cr>
" :let Tlist_Show_One_File = 1
" :let Tlist_Exit_OnlyWindow = 1
" :let Tlist_Use_Right_Window = 1 

"#####################
"       tagbar
"#####################
nmap <F5> :TagbarToggle<CR>

"###################
"     vim-move
"###################
let g:move_key_modifier = 'A'

"###################
"     gundo
"###################
nnoremap <F6> :GundoToggle<CR>

"###################
"   easy-align
"###################
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

""""""""""""
"  figlet  "
""""""""""""
let g:figletFontDir = '/usr/share/figlet'

"""""""""""""""""
"  vim-session  "
"""""""""""""""""
set sessionoptions-=help
let g:session_directory = '~/data/.vim/sessions'
let g:session_default_name = 'main'
" let g:session_autosave = 'yes'
let g:session_autosave_periodic = 5
